// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Sensor Sensor
//
// Датчик умного дома
// Example: {"current_state":1,"description":"Датчик температуры","id":1,"is_active":true,"last_activity":"2018-01-01T00:00:00Z","registered_at":"2018-01-01T00:00:00Z","serial_number":"1234567890","type":"cc"}
//
// swagger:model Sensor
type Sensor struct {

	// Состояние датчика, соответствует значению в payload последнего обработанного события.
	// Required: true
	CurrentState *int64 `json:"current_state"`

	// Описание
	// Required: true
	Description *string `json:"description"`

	// Идентификатор
	// Required: true
	// Minimum: 1
	ID *int64 `json:"id"`

	// Флаг активности датчика
	// Required: true
	IsActive *bool `json:"is_active"`

	// Время последнего события
	// Required: true
	// Format: date-time
	LastActivity *strfmt.DateTime `json:"last_activity"`

	// Дата/время регистрации
	// Required: true
	// Format: date-time
	RegisteredAt *strfmt.DateTime `json:"registered_at"`

	// Серийный номер
	// Required: true
	// Pattern: ^\d{10}$
	SerialNumber *string `json:"serial_number"`

	// Тип
	// Required: true
	// Enum: [cc adc]
	Type *string `json:"type"`
}

// Validate validates this sensor
func (m *Sensor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastActivity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSerialNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Sensor) validateCurrentState(formats strfmt.Registry) error {

	if err := validate.Required("current_state", "body", m.CurrentState); err != nil {
		return err
	}

	return nil
}

func (m *Sensor) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *Sensor) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinimumInt("id", "body", *m.ID, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Sensor) validateIsActive(formats strfmt.Registry) error {

	if err := validate.Required("is_active", "body", m.IsActive); err != nil {
		return err
	}

	return nil
}

func (m *Sensor) validateLastActivity(formats strfmt.Registry) error {

	if err := validate.Required("last_activity", "body", m.LastActivity); err != nil {
		return err
	}

	if err := validate.FormatOf("last_activity", "body", "date-time", m.LastActivity.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Sensor) validateRegisteredAt(formats strfmt.Registry) error {

	if err := validate.Required("registered_at", "body", m.RegisteredAt); err != nil {
		return err
	}

	if err := validate.FormatOf("registered_at", "body", "date-time", m.RegisteredAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Sensor) validateSerialNumber(formats strfmt.Registry) error {

	if err := validate.Required("serial_number", "body", m.SerialNumber); err != nil {
		return err
	}

	if err := validate.Pattern("serial_number", "body", *m.SerialNumber, `^\d{10}$`); err != nil {
		return err
	}

	return nil
}

var sensorTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cc","adc"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sensorTypeTypePropEnum = append(sensorTypeTypePropEnum, v)
	}
}

const (

	// SensorTypeCc captures enum value "cc"
	SensorTypeCc string = "cc"

	// SensorTypeAdc captures enum value "adc"
	SensorTypeAdc string = "adc"
)

// prop value enum
func (m *Sensor) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sensorTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Sensor) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sensor based on context it is used
func (m *Sensor) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Sensor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Sensor) UnmarshalBinary(b []byte) error {
	var res Sensor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
